// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johnmanjiro13/dokkoi/command (interfaces: CustomSearchRepository)

// Package mock_command is a generated GoMock package.
package mock_command

import (
	gomock "github.com/golang/mock/gomock"
	customsearch "google.golang.org/api/customsearch/v1"
	reflect "reflect"
)

// MockCustomSearchRepository is a mock of CustomSearchRepository interface
type MockCustomSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomSearchRepositoryMockRecorder
}

// MockCustomSearchRepositoryMockRecorder is the mock recorder for MockCustomSearchRepository
type MockCustomSearchRepositoryMockRecorder struct {
	mock *MockCustomSearchRepository
}

// NewMockCustomSearchRepository creates a new mock instance
func NewMockCustomSearchRepository(ctrl *gomock.Controller) *MockCustomSearchRepository {
	mock := &MockCustomSearchRepository{ctrl: ctrl}
	mock.recorder = &MockCustomSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomSearchRepository) EXPECT() *MockCustomSearchRepositoryMockRecorder {
	return m.recorder
}

// SearchImage mocks base method
func (m *MockCustomSearchRepository) SearchImage(arg0 string) (*customsearch.Search, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImage", arg0)
	ret0, _ := ret[0].(*customsearch.Search)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImage indicates an expected call of SearchImage
func (mr *MockCustomSearchRepositoryMockRecorder) SearchImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImage", reflect.TypeOf((*MockCustomSearchRepository)(nil).SearchImage), arg0)
}
